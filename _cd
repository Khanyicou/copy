#include "shell.h"

/**
 * _cd - change directory builtin
 * @av: argument to work with
 * Return: int
 */
int _cd(char *av[])
{char *oldpwd = NULL;
char *newpath = NULL;
int printpath = 0;
oldpwd = getcwd(oldpwd, 0);
if (oldpwd == NULL)
return (1);

if (av[1] == NULL || av[1][0] == 0)
{
char *home = _getenv("HOME");
av[1] = home ? home : _strdup("");
av[2] = NULL;}
else if (strcmp(av[1], "-") == 0)
{
char *old = _getenv("OLDPWD");
av[1] = old ? old : _strdup("");
printpath = 1;
free(av[1]);
}

newpath = build_new_path(oldpwd, av[1]);

if (newpath != NULL)
{
int ret = chdir(newpath);
if (ret == 0)
{
_setenv("OLDPWD", oldpwd);
free(oldpwd);
_setenv("PWD", newpath);
if (printpath)
fprintstrs(1, newpath, "\n", NULL);
free(newpath);
return (0);
}
printerr(": cd: can't cd to ");
fprintstrs(STDERR_FILENO, av[1], "\n", NULL);
free(newpath);
}
free(oldpwd);
return (1);
}

/**
 * build_new_path - builds the new path for cd
 * @oldpwd: the current working directory
 * @av1: the argument provided for cd
 * Return: a new path or NULL on failure
 */
char *build_new_path(char *oldpwd, char *av1)
{
char *newpath = NULL;
char *newptr = NULL;
char *pathbit = NULL;
char *tmp = NULL;

newpath = malloc(sizeof(char) * (strlen(oldpwd) + strlen(av1) + 2));
if (newpath == NULL)
return (NULL);

newptr = newpath;
pathbit = oldpwd;

if (av1[0] != '/' && pathbit[1] != 0)
{
while (*pathbit)
*newptr++ = *pathbit++;
}

*newptr++ = '/';
pathbit = strtok(av1, "/");

while (pathbit != NULL)
{
if (strcmp(pathbit, "..") == 0)
{
newptr--;
if (newptr != newpath)
newptr--;
while (*newptr != '/')
newptr--;
*newptr++ = '/';
}
else if (strcmp(pathbit, ".") != 0)
{
while (*pathbit)
*newptr++ = *pathbit++;
*newptr++ = '/';
}

pathbit = strtok(NULL, "/");
}

if (newptr != newpath && newptr != newpath + 1)
newptr--;

*newptr = 0;
return (newpath);
}

